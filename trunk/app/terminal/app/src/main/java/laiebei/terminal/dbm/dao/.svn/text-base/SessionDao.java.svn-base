package laiebei.terminal.dbm.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import laiebei.terminal.dbm.domain.Session;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SESSION".
*/
public class SessionDao extends AbstractDao<Session, String> {

    public static final String TABLENAME = "SESSION";

    /**
     * Properties of entity Session.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IpcCode = new Property(0, String.class, "ipcCode", true, "IPC_CODE");
        public final static Property Session = new Property(1, String.class, "session", false, "SESSION");
        public final static Property CreatTime = new Property(2, Long.class, "creatTime", false, "CREAT_TIME");
        public final static Property UpdateTime = new Property(3, Long.class, "updateTime", false, "UPDATE_TIME");
    }


    public SessionDao(DaoConfig config) {
        super(config);
    }
    
    public SessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SESSION\" (" + //
                "\"IPC_CODE\" TEXT PRIMARY KEY NOT NULL ," + // 0: ipcCode
                "\"SESSION\" TEXT NOT NULL ," + // 1: session
                "\"CREAT_TIME\" INTEGER," + // 2: creatTime
                "\"UPDATE_TIME\" INTEGER);"); // 3: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SESSION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Session entity) {
        stmt.clearBindings();
 
        String ipcCode = entity.getIpcCode();
        if (ipcCode != null) {
            stmt.bindString(1, ipcCode);
        }
        stmt.bindString(2, entity.getSession());
 
        Long creatTime = entity.getCreatTime();
        if (creatTime != null) {
            stmt.bindLong(3, creatTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(4, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Session entity) {
        stmt.clearBindings();
 
        String ipcCode = entity.getIpcCode();
        if (ipcCode != null) {
            stmt.bindString(1, ipcCode);
        }
        stmt.bindString(2, entity.getSession());
 
        Long creatTime = entity.getCreatTime();
        if (creatTime != null) {
            stmt.bindLong(3, creatTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(4, updateTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Session readEntity(Cursor cursor, int offset) {
        Session entity = new Session( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ipcCode
            cursor.getString(offset + 1), // session
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // creatTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Session entity, int offset) {
        entity.setIpcCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSession(cursor.getString(offset + 1));
        entity.setCreatTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUpdateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Session entity, long rowId) {
        return entity.getIpcCode();
    }
    
    @Override
    public String getKey(Session entity) {
        if(entity != null) {
            return entity.getIpcCode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Session entity) {
        return entity.getIpcCode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
