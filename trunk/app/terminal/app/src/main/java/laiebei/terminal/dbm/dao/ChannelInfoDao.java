package laiebei.terminal.dbm.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import laiebei.terminal.dbm.domain.ChannelInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNEL_INFO".
*/
public class ChannelInfoDao extends AbstractDao<ChannelInfo, Long> {

    public static final String TABLENAME = "CHANNEL_INFO";

    /**
     * Properties of entity ChannelInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Channel = new Property(1, Long.class, "channel", false, "CHANNEL");
        public final static Property CabinetId = new Property(2, Long.class, "cabinetId", false, "CABINET_ID");
        public final static Property Sense = new Property(3, int.class, "sense", false, "SENSE");
        public final static Property Pump = new Property(4, int.class, "pump", false, "PUMP");
    }

    private Query<ChannelInfo> cabinetInfo_ChannelInfosQuery;

    public ChannelInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNEL_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CHANNEL\" INTEGER," + // 1: channel
                "\"CABINET_ID\" INTEGER," + // 2: cabinetId
                "\"SENSE\" INTEGER NOT NULL ," + // 3: sense
                "\"PUMP\" INTEGER NOT NULL );"); // 4: pump
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNEL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChannelInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long channel = entity.getChannel();
        if (channel != null) {
            stmt.bindLong(2, channel);
        }
 
        Long cabinetId = entity.getCabinetId();
        if (cabinetId != null) {
            stmt.bindLong(3, cabinetId);
        }
        stmt.bindLong(4, entity.getSense());
        stmt.bindLong(5, entity.getPump());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChannelInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long channel = entity.getChannel();
        if (channel != null) {
            stmt.bindLong(2, channel);
        }
 
        Long cabinetId = entity.getCabinetId();
        if (cabinetId != null) {
            stmt.bindLong(3, cabinetId);
        }
        stmt.bindLong(4, entity.getSense());
        stmt.bindLong(5, entity.getPump());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChannelInfo readEntity(Cursor cursor, int offset) {
        ChannelInfo entity = new ChannelInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // channel
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // cabinetId
            cursor.getInt(offset + 3), // sense
            cursor.getInt(offset + 4) // pump
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChannelInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChannel(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCabinetId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSense(cursor.getInt(offset + 3));
        entity.setPump(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChannelInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChannelInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChannelInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "channelInfos" to-many relationship of CabinetInfo. */
    public List<ChannelInfo> _queryCabinetInfo_ChannelInfos(Long cabinetId) {
        synchronized (this) {
            if (cabinetInfo_ChannelInfosQuery == null) {
                QueryBuilder<ChannelInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CabinetId.eq(null));
                cabinetInfo_ChannelInfosQuery = queryBuilder.build();
            }
        }
        Query<ChannelInfo> query = cabinetInfo_ChannelInfosQuery.forCurrentThread();
        query.setParameter(0, cabinetId);
        return query.list();
    }

}
