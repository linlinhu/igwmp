package laiebei.terminal.dbm.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import laiebei.terminal.dbm.domain.Resources;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESOURCES".
*/
public class ResourcesDao extends AbstractDao<Resources, Long> {

    public static final String TABLENAME = "RESOURCES";

    /**
     * Properties of entity Resources.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Version = new Property(2, String.class, "version", false, "VERSION");
        public final static Property LocalUrl = new Property(3, String.class, "localUrl", false, "LOCAL_URL");
        public final static Property RemoteUrl = new Property(4, String.class, "remoteUrl", false, "REMOTE_URL");
        public final static Property Md5 = new Property(5, String.class, "md5", false, "MD5");
        public final static Property Describe = new Property(6, String.class, "describe", false, "DESCRIBE");
    }


    public ResourcesDao(DaoConfig config) {
        super(config);
    }
    
    public ResourcesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESOURCES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"VERSION\" TEXT NOT NULL ," + // 2: version
                "\"LOCAL_URL\" TEXT," + // 3: localUrl
                "\"REMOTE_URL\" TEXT," + // 4: remoteUrl
                "\"MD5\" TEXT," + // 5: md5
                "\"DESCRIBE\" TEXT);"); // 6: describe
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESOURCES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Resources entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getVersion());
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(4, localUrl);
        }
 
        String remoteUrl = entity.getRemoteUrl();
        if (remoteUrl != null) {
            stmt.bindString(5, remoteUrl);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(6, md5);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(7, describe);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Resources entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getVersion());
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(4, localUrl);
        }
 
        String remoteUrl = entity.getRemoteUrl();
        if (remoteUrl != null) {
            stmt.bindString(5, remoteUrl);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(6, md5);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(7, describe);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Resources readEntity(Cursor cursor, int offset) {
        Resources entity = new Resources( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // version
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remoteUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // md5
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // describe
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Resources entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setVersion(cursor.getString(offset + 2));
        entity.setLocalUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemoteUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMd5(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescribe(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Resources entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Resources entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Resources entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
