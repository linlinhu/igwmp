<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-4.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
http://code.alibabatech.com/schema/dubbo       
http://code.alibabatech.com/schema/dubbo/dubbo.xsd
">
	<!-- 启用spring mvc 注解 -->
    <context:annotation-config />
   
    <!-- 设置使用注解的类所在的jar包 -->
    <context:component-scan base-package="com.emin" ></context:component-scan>
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	<aop:config proxy-target-class="false"></aop:config>
	<bean id="springContextHolder" class="com.emin.base.util.SpringContextHolder"></bean>
	<bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:/db.properties" />	
	</bean> 
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
		<property name="driverClass" value="${db.driverClass}" />
		<property name="jdbcUrl" value="${db.plt.baseUrl}/${db.plt.name}" />
		<property name="user" value="${db.plt.user}" />
		<property name="password" value="${db.plt.password}" />
		<property name="minPoolSize" value="${db.minPoolSize}" />
		<property name="maxPoolSize" value="${db.maxPoolSize}" />
		<property name="initialPoolSize" value="${db.initialPoolSize}" />
		<property name="maxIdleTime" value="${db.maxIdleTime}" />
		<property name="acquireIncrement" value="${db.acquireIncrement}" />
		<property name="maxStatements" value="${db.maxStatements}" />
		<property name="idleConnectionTestPeriod" value="${db.idleConnectionTestPeriod}" />
		<property name="acquireRetryAttempts" value="${db.acquireRetryAttempts}" />
		<property name="breakAfterAcquireFailure" value="${db.breakAfterAcquireFailure}" />
		<property name="testConnectionOnCheckout" value="${db.testConnectionOnCheckout}" />
	</bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">		
		<!-- 依赖注入上面定义的数据源dataSource -->  
        <property name="dataSource" ref="dataSource" /> 
        <property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					${hibernate.dialect}
				</prop>
				<prop key="hibernate.show_sql">
					${hibernate.show_sql}
				</prop>
				<prop key="use_sql_comments">${use_sql_comments}</prop>
				<prop key="hibernate.format_sql">
					${hibernate.format_sql}
				</prop>
				<prop key="hibernate.generate_statistics">
					${hibernate.generate_statistics}
				</prop>
				<prop key="hibernate.jdbc.batch_size">
					${hibernate.jdbc.batch_size}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">					
					${hibernate.hbm2ddl.auto}
				</prop>				
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.connection.release_mode">
					${hibernate.connection.release_mode}
				</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.emin.igwmp.fs.domain</value>			
			</list>
		</property>
	</bean>
	
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	 
	 
	 <!-- 每天凌晨清空零时文件 -->
	<bean id="cleanTemporaryFilesBean"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="eminFileService" />
		<property name="targetMethod" value="cleanTemporaryFiles" />
		<property name="concurrent" value="false" /> <!-- 不允许并发 -->
	</bean>
	<bean id="cleanTemporaryFilesTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cleanTemporaryFilesBean" />
		<property name="cronExpression">
			<value>0 0 0 * * ?</value>
		</property>
	</bean>
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cleanTemporaryFilesTrigger" />
			</list>
		</property>
		<property name="autoStartup" value="true" />
	</bean>
	 
	<!--定义Hibernate的事务管理器HibernateTransactionManager -->  
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">  
        <!-- 依赖注入上面定义的sessionFactory -->  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean> 
	<tx:annotation-driven transaction-manager="transactionManager" /> 
    <!-- DUBBO 扫描service服务 -->
    <dubbo:application name="igwmp-fs" />
    <!-- 	 zookeeper://192.168.6.202:2181"  zookeeper://192.168.0.222:2181 -->
	<dubbo:registry address="zookeeper://192.168.6.201:2181" file="dubbo-fs.cache" />
	<dubbo:consumer check="false" timeout="10000" ></dubbo:consumer><!-- 启动时不检查  -->
	<!-- 扫描注解包路径，多个包用逗号分隔，不填pacakge表示扫描当前ApplicationContext中所有的类 -->
	<dubbo:annotation />
	<dubbo:protocol name="dubbo" port="20100"></dubbo:protocol>
	<dubbo:provider accesslog="true" timeout="10000" ></dubbo:provider>
	 
	
</beans>